{
    // Show a dialog message regarding 'Restart ST' in the 
    // following cases: 
    // - First install
    // - Rebuild files
    // - Upgrade package
    // - Install one or all themes
    // - Delete one or all themes
    //
    // Default is true. 
    // Turn to false, if do not want to display this diablog.
    "zukan_restart_message": true,

    // Ignore icon option will exclude icon from building.
    //
    // A list of icons names can be seen in
    // https://github.com/53v3n3d4/Zukan-Icon-Theme/blob/main/docs/file-icon.md
    //
    // It can be icon name or icon SVG name. E.g., to ignore
    // Node.js icon use: "Node.js", "nodejs" or "nodejs.svg"
    //
    // A 'primary' tag is supported and will ignore ST theme
    // essentials icons. Icons with tag 'primary':
    // - file_type_binary
    // - file_type_default
    // - file_type_image
    // - file_type_markup
    // - file_type_source
    //
    // Example: ["nodejs", "primary"]
    "ignored_icon": [],

    // This option is to change icon. There are few icons
    // that has another option. You can see them in link
    // above.
    //
    // If icon in 'ignored_icon', change icon will not
    // occur.
    //
    // A key and value is required, and insert it inside
    // curly brackets.
    //
    // Key is icon name and value is icon SVG name.
    //
    // Examples: {
    //     "Angular": "angular-1",
    //     "Composer": "composer-1",
    //     "Composer": "composer-2",
    //     "C#": "csharp-1",
    //     "DirectX": "directx-1",
    //     "Go": "go-1",
    //     "Image": "file_type_image-1",
    //     "LLVM": "llvm-1",
    //     "Node.js": "nodejs-1",
    //     "PHP": "php-1",
    //     "Python": "python-1",
    //     "Ruff": "ruff-1",
    //     "Rust": "rust-1",
    //     "Sublime Text": "sublime-1"
    // }
    "change_icon": {},

    // This option can help, if icon is pointing to a not
    // desired file extension, when:
    // - languages or libraries use same file extension
    // - packages use different scopes for same file
    // extension.
    //
    // It only removes file extensions in existing icons
    // syntaxes, excluding the one inserted.
    //
    // In cases, where icons syntaxes do not exist, when
    // language syntaxes are installed. Using ST 'View >
    // Syntax > Open all with current extension as...'
    // could fix see the desired icon.
    // E.g., Clojure and ClojureScript, cljc extension is
    // in both, no icons syntaxes since they are ST 
    // package. ClojureScript syntax will prevail since ST
    // reads it last.
    //
    // Required parameters are: scope and file extensions.
    // Note: file extension needs to be inside square
    // brackets.
    //
    // Examples: [
    //    { "scope": "source.js.jxa", "file_extensions": ["js"] },
    //    { "scope": "source.iot", "file_extensions": ["ino", "pde"] },
    //    { "scope": "source.vbs", "file_extensions": ["cls", "vbs"] },
    //    { "scope": "source.bazel", "file_extensions": ["BUILD", "WORKSPACE"] },
    //    { "scope": "source.starlark", "file_extensions": ["BUILD", "WORKSPACE", "bazel", "bzl"] },
    //    { "scope": "feature.behat", "file_extensions": ["feature"] },
    //    { "scope": "source.clojure", "file_extensions": ["cljc"] },
    //    { "scope": "source.cmakeeditor", "file_extensions": ["CMakeLists.txt"] },
    //    { "scope": "source.cuda-c++", "file_extensions": ["h"] },
    //    { "scope": "text.django", "file_extensions": ["css", "html", "xml"] },
    //    { "scope": "source.yaml.flutter", "file_extensions": ["pubspec.lock", "pubspec.yaml"] },
    //    { "scope": "source.modern-fortran", "file_extensions": ["f90", "F90", "f95", "F95", "f03", "F03", "f08", "F08"] },
    //    { "scope": "source.fsharp", "file_extensions": ["fs"] },
    //    { "scope": "source.sss", "file_extensions": ["sss"] },
    //    { "scope": "source.unity_shader", "file_extensions": ["cginc", "shader"] },
    //    { "scope": "source.ini", "file_extensions": ["setup.cfg"] },
    //    { "scope": "source.ini.setuptools", "file_extensions": ["setup.cfg"] },
    //    { "scope": "source.ini.tox", "file_extensions": ["setup.cfg"] },
    //    { "scope": "source.toml", "file_extensions": ["config.toml"] },
    //    { "scope": "source.toml", "file_extensions": ["book.toml"] },
    //    { "scope": "source.toml", "file_extensions": ["pyproject.toml"] },
    //    { "scope": "source.toml.pdm", "file_extensions": ["pyproject.toml"] },
    //    { "scope": "source.toml.pip", "file_extensions": ["pyproject.toml"] },
    //    { "scope": "source.toml.poetry", "file_extensions": ["pyproject.toml"] },
    //    { "scope": "source.toml.setuptools", "file_extensions": ["pyproject.toml"] },
    //    { "scope": "source.toml.tox", "file_extensions": ["pyproject.toml"] },
    //    { "scope": "source.yaml", "file_extensions": ["ci.yml"] },
    //    { "scope": "source.yaml", "file_extensions": ["config.yml"] },
    //    { "scope": "text.plain", "file_extensions": ["requirements.txt"] },
    //    { "scope": "text.plain.uv", "file_extensions": ["requirements.txt"] },
    // ]
    "change_icon_file_extension": [],

    // Create custom icon option can be used to insert an
    // icon or a file extension that does not exist. The PNGs
    // files, if not present, will have to be inserted
    // manually in Zukan 'icons' folder.
    //
    // 3 options, 'name' is required:
    // 1- To create an icon for a scope without file extension,
    // fill icon and scope keys.
    //
    // 2- To insert a file_extension for a existing icon, ommit
    // icon key.
    //
    // 3- To create a new icon with file_extension, keys icon,
    // syntax_name, scope and file_extensions are necessary.
    //
    // Contexts_scope serves to use a base highlighting, e.g.
    // JSON insert source.json
    //
    // Examples: [
    //    {
    //        "name": "ATest",
    //        "icon": "atest",
    //        "scope": "source.toml.atest, source.js.atest"
    //    },
    //    {
    //        "name": "ATest-1",
    //        "syntax_name": "JSON (ATest-1)",
    //        "scope": "source.json.atest1",
    //        "file_extensions": ["atest1.config.json"],
    //        "contexts_scope": "source.json"
    //    },
    //    {
    //        "name": "ATest-2",
    //        "icon": "atest2",
    //        "syntax_name": "ATest-2",
    //        "scope": "source.atest2",
    //        "file_extensions": ["xyz"]
    //    },
    //    {
    //        "name": "ATest-3",
    //        "icon": "atest3",
    //        "syntax_name": "ATest-3",
    //        "scope": "source.atest3",
    //        "file_extensions": ["abc", "def"],
    //        "contexts_scope": "source.atest2"
    //    }
    // ]
    "create_custom_icon": [],

    // This option will auto rebuild icon in the following
    // case:
    // - ST function 'add_on_change' is triggered by
    // 'Zukan Icon Theme.sublime-settings'
    //
    // It builds icons files, if one of the following
    // settings change:
    // - 'ignored_icon'
    // - 'change_icon'
    // - 'change_icon_file_extension'
    // - 'create_custom_icon'
    //
    // Default is true. Change to false, to turn off auto
    // rebuild setting,
    "auto_rebuild_icon": true,

    // This option will auto install theme in the following
    // cases:
    // - ST function 'add_on_change' is triggered by
    // 'Preferences.sublime-settings'
    // - ST start
    //
    // If true, commands below will have no effect since
    // themes will be created after deleted:
    // - 'Zukan Icon Theme: Delete Theme'
    // - 'Zukan Icon Theme: Install Theme'
    //
    // Other commands continue to work, for example delete
    // and install preference.
    //
    // Command 'Zukan Icon Theme: Delete Syntax' works, but
    // since ST activate 'add_on_change', will be followed by
    // theme install.
    //
    // Default is false.
    "auto_install_theme": false,

    // Ignore theme option will exclude the theme name from
    // creating an icon theme. Thus not show icons in ignored
    // theme.
    //
    // You may need to restart ST for all icons show or not
    // after changing list.
    //
    // Insert theme name inside square brackets.
    //
    // Example: ["Treble Dark.sublime-theme"]
    "ignored_theme": [],

    // This setting control if user want to auto upgrade
    // icons preferences and syntaxes files.
    //
    // ST auto upgrade packages plugins. This package choose
    // to build icons syntaxes and preferences based on user
    // installed syntaxes and themes, to avoid errors about
    // duplication or not founded syntaxes.
    //
    // Only data file and icons PNGs are auto updated by ST.
    //
    // If true, will auto rebuild icons syntaxes and
    // preferences.
    //
    // Default is true.
    "rebuild_on_upgrade": true,

    // Do not change version. Neither use this option.
    // It is used to upgrade package if 'rebuild_on_upgrade'
    // is true
    "version": "0.3.1",

    // https://docs.python.org/3/library/logging.html
    // It currently only accept Python library logging default
    // codes:
    // - DEBUG
    // - INFO
    // - WARNING
    // - ERROR
    // - CRITICAL
    //
    // Default is INFO. A ST restart is needed when change
    // value.
    "log_level": "INFO"
}